Great! I have added the MongoDB Atlas connection string as a Replit Secret:

Key: `MONGODB_URI`
Value: mongodb+srv://lpretorius07:YOUR_PASSWORD@cluster0.dnah0.mongodb.net/salestrackr?retryWrites=true&w=majority

Now, please complete the full MongoDB + Mongoose setup:

### 1. Install Mongoose
Run: `npm install mongoose`

### 2. Connect to MongoDB in `server/index.ts` (or main server file)
- Import mongoose
- At the top of the file (after dotenv), add:
```ts
mongoose.connect(process.env.MONGODB_URI!)
  .then(() => console.log("MongoDB connected successfully"))
  .catch(err => console.error("MongoDB connection error:", err));
3. Create server/models/ folder and add these Mongoose model files:
User.ts
tsimport mongoose from 'mongoose';

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  role: { type: String, enum: ['agent', 'admin'], default: 'agent' }
});

export default mongoose.model('User', userSchema);
Client.ts
tsimport mongoose from 'mongoose';

const clientSchema = new mongoose.Schema({
  name: { type: String, required: true },
  address: String,
  lat: { type: Number, required: true },
  lng: { type: Number, required: true },
  region: String,
  hasComplaint: { type: Boolean, default: false },
  complaintNote: String,
  requestedVisit: { type: Boolean, default: false }
});

export default mongoose.model('Client', clientSchema);
Depot.ts
tsimport mongoose from 'mongoose';

const depotSchema = new mongoose.Schema({
  name: { type: String, required: true },
  lat: { type: Number, required: true },
  lng: { type: Number, required: true },
  inspection: {
    done: { type: Boolean, default: false },
    hsFile: { type: Boolean, default: false },
    housekeeping: { type: Number, min: 1, max: 5 },
    hazLicense: { type: Boolean, default: false },
    stockCounted: { type: Boolean, default: false },
    notes: String
  }
});

export default mongoose.model('Depot', depotSchema);
Visit.ts
tsimport mongoose from 'mongoose';

const visitSchema = new mongoose.Schema({
  client: { type: mongoose.Schema.Types.ObjectId, ref: 'Client', required: true },
  agent: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  checkInTime: { type: Date, default: Date.now },
  checkOutTime: Date
});

export default mongoose.model('Visit', visitSchema);
MissedOrder.ts
tsimport mongoose from 'mongoose';

const missedOrderSchema = new mongoose.Schema({
  client: { type: mongoose.Schema.Types.ObjectId, ref: 'Client' },
  product: { type: String, required: true },
  reason: String,
  date: { type: Date, default: Date.now }
});

export default mongoose.model('MissedOrder', missedOrderSchema);
TrainingLog.ts
tsimport mongoose from 'mongoose';

const trainingLogSchema = new mongoose.Schema({
  agent: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  description: { type: String, required: true },
  date: { type: Date, default: Date.now }
});

export default mongoose.model('TrainingLog', trainingLogSchema);
ProductComplaint.ts
tsimport mongoose from 'mongoose';

const complaintSchema = new mongoose.Schema({
  client: { type: mongoose.Schema.Types.ObjectId, ref: 'Client' },
  product: { type: String, required: true },
  comment: { type: String, required: true },
  date: { type: Date, default: Date.now }
});

export default mongoose.model('ProductComplaint', complaintSchema);
4. Add a Test Route in server/routes.ts
ts// Test DB connection and model
router.get('/test-db', async (req, res) => {
  try {
    const testClient = new Client({
      name: "Test Farm",
      address: "123 Farm Rd",
      lat: -25.7479,
      lng: 28.2293,
      region: "Gauteng"
    });
    await testClient.save();
    res.json({ success: true, client: testClient });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
5. Final Steps

Ensure all models are exported correctly
Show updated server/index.ts with mongoose.connect
Confirm console logs: "MongoDB connected successfully"
Tell me how to test: GET /api/test-db

Generate all files and changes clearly.